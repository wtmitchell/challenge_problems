//===-- project_euler/Problem8.cpp ------------------------------*- C++ -*-===//
//
// ProjectEuler.net solutions by Will Mitchell
//
// This file is distributed under the MIT License. See LICENSE for details.
//
//===----------------------------------------------------------------------===//
///
/// \class project_euler::Problem8
/// \brief Largest product in a series
///
/// Question
/// --------
/// Find the greatest product of five consecutive digits in the 1000-digit
///  number.
///
/// 73167176531330624919225119674426574742355349194934
/// 96983520312774506326239578318016984801869478851843
/// 85861560789112949495459501737958331952853208805511
/// 12540698747158523863050715693290963295227443043557
/// 66896648950445244523161731856403098711121722383113
/// 62229893423380308135336276614282806444486645238749
/// 30358907296290491560440772390713810515859307960866
/// 70172427121883998797908792274921901699720888093776
/// 65727333001053367881220235421809751254540594752243
/// 52584907711670556013604839586446706324415722155397
/// 53697817977846174064955149290862569321978468622482
/// 83972241375657056057490261407972968652414535100474
/// 82166370484403199890008895243450658541227588666881
/// 16427171479924442928230863465674813919123162824586
/// 17866458359124566529476545682848912883142607690042
/// 24219022671055626321111109370544217506941658960408
/// 07198403850962455444362981230987879927244284909188
/// 84580156166097919133875499200524063689912560717606
/// 05886116467109405077541002256983155200055935729725
/// 71636269561882670428252483600823257530420752963450
///
//===----------------------------------------------------------------------===//
#include "Problem8.h"

#include <cstring>
using std::strlen;
#include <sstream>
using std::stringstream;
#include <string>
using std::string;

/// \cond Suppress Doxygen warning
namespace {
const auto numbers =
    "73167176531330624919225119674426574742355349194934969835203127745063262395"
    "78318016984801869478851843858615607891129494954595017379583319528532088055"
    "11125406987471585238630507156932909632952274430435576689664895044524452316"
    "17318564030987111217223831136222989342338030813533627661428280644448664523"
    "87493035890729629049156044077239071381051585930796086670172427121883998797"
    "90879227492190169972088809377665727333001053367881220235421809751254540594"
    "75224352584907711670556013604839586446706324415722155397536978179778461740"
    "64955149290862569321978468622482839722413756570560574902614079729686524145"
    "35100474821663704844031998900088952434506585412275886668811642717147992444"
    "29282308634656748139191231628245861786645835912456652947654568284891288314"
    "26076900422421902267105562632111110937054421750694165896040807198403850962"
    "45544436298123098787992724428490918884580156166097919133875499200524063689"
    "91256071760605886116467109405077541002256983155200055935729725716362695618"
    "82670428252483600823257530420752963450";
}
/// \endcond

string project_euler::Problem8::answer() {
  if (!solved)
    solve();

  stringstream ss;

  ss << "The greatest product is " << product;

  return ss.str();
}

std::string project_euler::Problem8::description() const {
  return "Problem 8: Largest product in a series";
}

void project_euler::Problem8::solve() {
  const auto numbers_length = strlen(numbers);

  product = 0;

  for (unsigned int i = 0; i < numbers_length - 4; ++i) {
    const auto candidate = (numbers[i] - '0') * (numbers[i + 1] - '0') *
                           (numbers[i + 2] - '0') * (numbers[i + 3] - '0') *
                           (numbers[i + 4] - '0');
    if (candidate > product)
      product = candidate;
  }

  solved = true;
}
